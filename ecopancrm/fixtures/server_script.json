[
 {
  "allow_guest": 1,
  "api_method": "imp_employee",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-10-17 13:47:47.138505",
  "module": "EcopanCRM",
  "name": "imp_employee",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Ecopan DVR",
  "script": "customer =frappe.response['customer'] = frappe.form_dict.customer\r\nif not customer:\r\n      frappe.throw(_(\"cliente non passato\"))\r\n          \r\nemployees = frappe.get_all('Ecopan Employee', filters={'parent': customer}, fields=['first_name','last_name', 'gender'])\r\n    \r\n    # Restituisce i dipendenti come parte della risposta\r\nfrappe.response['message'] = employees \r\n       \r\n    \r\n\r\n",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": "say_hello",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-03-11 11:11:46.358621",
  "module": "EcopanCRM",
  "name": "hello_world",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": null,
  "script": "list = frappe.get_all(\n    \"Ecopan Formazione Corsi\",\n  \n  fields=[\"name\"]  # Estrai solo il nome (o altri campi se necessari)\n)\n\n# Restituisci un elenco dei nomi dei branch\nfrappe.response['message'] = list\n    ",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": "imp_employee_data",
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-12-18 20:42:50.722833",
  "module": "EcopanCRM",
  "name": "importazione dei dati",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Ecopan DVR",
  "script": "# Recupera i valori inviati tramite la richiesta POST\noption = frappe.form_dict.get('option').replace('\"', '').strip()\nemployees = frappe.form_dict.get('employees')\nparent = frappe.form_dict.get('parent')\n\n# Imposta i valori di ritorno nella risposta\nfrappe.response['option'] = option\nfrappe.response['employees'] = employees\nfrappe.response['parent'] = parent\n\n# Validazione dell'input\nif not option or not employees or not parent:\n    frappe.throw(_(\"Input non valido\"))\n\noption = option.replace('\"', '').strip()\nif isinstance(employees, str):\n    employees = employees.strip('[]').replace('\"', '').replace(\"'\", \"\").replace(\"_\", \" \").split(',')\n\n# Mappatura delle opzioni ai doctype e ai parentfield\noption_map = {\n    \"RSPP\": {\"doctype\": \"Ecopan DVR RSPP\", \"parentfield\": 'rspp_table'},\n    \"ASPP\": {\"doctype\": \"Ecopan DVR ASPP\", \"parentfield\": 'aspp_table'},\n    \"COMPANYDOCTOR\": {\"doctype\": \"Ecopan DVR MedicoCompetente\", \"parentfield\": 'medico_competente_table'},\n    \"BOSS\": {\"doctype\": \"Ecopan DVR DatoreLavoro\", \"parentfield\": 'datore_di_lavoro_table'},\n    \"RLS\": {\"doctype\": \"Ecopan DVR RLS\", \"parentfield\": 'rls_table'},\n    \"TERMINAL\": {\"doctype\": \"Ecopan DVR Video Terminali\", \"parentfield\": 'terminali_ambiente'}\n}\n\nif option not in option_map:\n    frappe.throw(_(\"Opzione non valida\"))\ntry:\n    for employee_name in employees:\n        data = option_map[option]\n        doctype = data[\"doctype\"]\n        parentfield = data[\"parentfield\"]\n\n        # Prova a ottenere il documento\n        try:\n            doc = frappe.get_doc(doctype, employee_name)\n        except frappe.DoesNotExistError:\n            # Se il documento non esiste, creane uno nuovo\n            doc = frappe.new_doc(doctype)\n            doc.nome = employee_name\n        \n        # Imposta i campi del documento\n        doc.parenttype = 'Ecopan DVR'\n        doc.parentfield = parentfield\n        doc.parent = parent\n        doc.save(ignore_permissions=True)  # Salva il documento\n        \n        # Controllo se il documento è stato salvato con successo\n        if not frappe.db.exists(doctype, doc.name):\n            raise Exception(f\"Impossibile salvare il documento per {employee_name}\")\n\n    frappe.response['message'] = \"Operazione completata con successo!\"\n\nexcept frappe.ValidationError as e:\n    frappe.throw(_(\"Errore di validazione: \") + str(e))\nexcept frappe.DoesNotExistError as e:\n    frappe.throw(_(\"Documento non trovato: \") + str(e))\nexcept Exception as e:\n    frappe.throw(_(\"Si è verificato un errore: \") + str(e))\n",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": "list_branch",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-10-17 10:55:37.797900",
  "module": "EcopanCRM",
  "name": "BranchDVR",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": null,
  "script": "customer = frappe.form_dict.get('client')\nbranches = frappe.get_all('Ecopan Branch', filters={'parent': customer}, fields=['name', 'branch_name'])\nfrappe.response['message'] = branches\nfrappe.response['opt'] = customer",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": "list_employee",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-12-11 10:11:42.279979",
  "module": "EcopanCRM",
  "name": "Formazione_Employee",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": null,
  "script": "customer = frappe.form_dict.get('codice_azienda')\nemployee = frappe.get_all('Ecopan Employee', filters={'parent': customer}, fields=['name', 'first_name', 'last_name','parent','name'])\nfrappe.response['message'] = employee\nfrappe.response['opt'] = customer",
  "script_type": "API"
 },
 {
  "allow_guest": 1,
  "api_method": "DVR_View",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-11-30 12:37:23.852728",
  "module": "EcopanCRM",
  "name": "DVR_View",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": null,
  "script": "customer = frappe.form_dict.get('client')\nDVR = frappe.get_all('Ecopan DVR', filters={'client': customer}, fields=['name','creation_date','expiry_date','branch','client'])\nfrappe.response['message'] = DVR\n",
  "script_type": "API"
 },
 {
  "allow_guest": 1,
  "api_method": "SPP_View",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-11-30 12:38:24.494816",
  "module": "EcopanCRM",
  "name": "SPP_View",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": null,
  "script": "customer = frappe.form_dict.get('client')\nSPP = frappe.get_all('Ecopan SSP', filters={'client': customer}, fields=['name','creation_date','expiry_date','branch','client'])\nfrappe.response['message'] = SPP\n",
  "script_type": "API"
 },
 {
  "allow_guest": 1,
  "api_method": "insert_datore_lavoro",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-12-20 15:33:54.600005",
  "module": "EcopanCRM",
  "name": "insert_datore_lavoro",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": null,
  "script": "client = frappe.form_dict.get('client')\n# Query 1: Ottieni dipendenti associati\nrls = frappe.get_all('Ecopan Employee',filters={'parent': client, 'data_nomina_rls': ['is', 'set']},fields=['first_name', 'last_name', 'current_job_title', 'employment_status', 'data_nomina_rls'])\nfrappe.response['message_rls'] = rls\n\n# Query 2: Ottieni dipendenti associati\npreposto = frappe.get_all('Ecopan Employee',filters={'parent': client, 'data_nomina_preposto': ['is', 'set']},fields=['first_name', 'last_name', 'current_job_title', 'employment_status', 'data_nomina_preposto'])\nfrappe.response['message_preposto'] = preposto\n\n# Query 3: Ottieni dipendenti associati\nantincendio = frappe.get_all('Ecopan Employee',filters={'parent': client, 'data_nomina_antincendio': ['is', 'set']},fields=['first_name', 'last_name', 'current_job_title', 'employment_status', 'data_nomina_antincendio'])\nfrappe.response['message_antincendio'] = antincendio\n\n# Query 4: Ottieni dipendenti associati\nprimo_soccorso = frappe.get_all('Ecopan Employee',filters={'parent': client, 'data_nomina_primo_soccorso':['is', 'set']},fields=['first_name', 'last_name', 'current_job_title', 'employment_status', 'data_nomina_primo_soccorso'])\nfrappe.response['message_primo_soccorso'] = primo_soccorso\n\n# Query 5: Ottieni dipendenti associati\nrspp = frappe.get_all('Ecopan Employee',filters={'parent': client, 'data_nomina_rspp':['is', 'set']},fields=['first_name', 'last_name', 'current_job_title', 'employment_status', 'data_nomina_rspp'])\nfrappe.response['message_rspp'] = rspp\n\n# Query 6: Ottieni dipendenti associati\nppp = frappe.get_all('Ecopan Employee',filters={'parent': client, 'data_nomina_pes_pei_pav':['is', 'set']},fields=['first_name', 'last_name', 'current_job_title', 'employment_status', 'data_nomina_pes_pei_pav'])\nfrappe.response['message_ppp'] = ppp\n\n# Query 7: Ottieni dipendenti associati\naspp = frappe.get_all('Ecopan Employee',filters={'parent': client, 'data_nomina_aspp':['is', 'set']},fields=['first_name', 'last_name', 'current_job_title', 'employment_status', 'data_nomina_aspp'])\nfrappe.response['message_aspp'] = aspp\n\n# Query 9: Ottieni dipendenti associati\ndirigente = frappe.get_all('Ecopan Employee',filters={'parent': client, 'data_nomina_dirigente': ['is', 'set']},fields=['first_name', 'last_name', 'current_job_title', 'employment_status', 'data_nomina_dirigente'])\nfrappe.response['message_dirigente'] = dirigente    \n\n# Query 9: Ottieni dipendenti associati\ndatore_lav = frappe.get_all('Ecopan Employee',filters={'parent': client, 'boss_label':1},fields=['first_name', 'last_name', 'current_job_title' ])\nfrappe.response['message_datore_lav'] = datore_lav ",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": "ins_form_dipendenti",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-12-10 18:42:47.700836",
  "module": "EcopanCRM",
  "name": "Insert_Formazione_Dipendenti",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": null,
  "script": "def salva_formazione(corso_formazione, formazione_ecopan, data_formazione, descrizione):\n    # Crea un nuovo record nel Doctype Ecopan Formazione Employee\n    nuovo_record = frappe.new_doc('Ecopan Formazione Employee')\n    nuovo_record.corso_formazione = corso_formazione\n    nuovo_record.formazione_ecopan = formazione_ecopan\n    nuovo_record.data_formazione = data_formazione\n    nuovo_record.descrizione = descrizione\n    nuovo_record.insert()\n    return nuovo_record.name",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": "insert_visit_formazione",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-12-12 12:51:09.183733",
  "module": "EcopanCRM",
  "name": "Insert_Formazione_Visite",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": null,
  "script": "# Funzione per decodificare la stringa URL-encoded\ndef urldecode(input_string):\n    # Decodifica manuale dei caratteri URL-encoded\n    return input_string.replace('%20', ' ').replace('%7B', '{').replace('%7D', '}').replace('%22', '\"')\n\n# Ottieni i dati dai form\nfun = frappe.form_dict.get('fun')  # Funzionalità tasto\ncorso_formazione = frappe.form_dict.get('corso_formazione')\nformazione_ecopan = frappe.form_dict.get('formazione_ecopan')\ndata_formazione = frappe.form_dict.get('data_formazione')\ndescrizione = frappe.form_dict.get('descrizione')\ndata_visita = frappe.form_dict.get('data_visita')\ndata_scadenza = frappe.form_dict.get('data_scadenza')\nannotazioni_visita = frappe.form_dict.get('annotazioni_visita')\n\nif not fun:\n    frappe.msgprint(\"Parametro 'fun' mancante o non valido.\")\n\n\n# Ottieni la stringa dei dipendenti selezionati\ndipendenti_selezionati = frappe.form_dict.get('dipendenti_selezionati')\n\n# Controlla se 'dipendenti_selezionati' non è None e ha un valore\nif dipendenti_selezionati:\n    # Decodifica la stringa URL-encoded\n    dipendenti_selezionati = urldecode(dipendenti_selezionati)\n\n    # Ora la stringa è JSON, quindi possiamo caricarla come lista\n    try:\n        dipendenti = json.loads(dipendenti_selezionati)  # Converte la stringa JSON in una lista\n    except json.JSONDecodeError:\n        frappe.msgprint(\n            msg='Impossibile decodificare i dati dei dipendenti',\n            title='Errore',\n            raise_exception=False\n        )\nelse:\n    frappe.msgprint(\n        msg='Nessun dato per i dipendenti selezionati.',\n        title='Errore',\n        raise_exception=False\n    )\n\n# Verifica se dipendenti è una lista\nif isinstance(dipendenti, list):\n    for dipendente in dipendenti:\n        name = dipendente.get('name')\n        parent = dipendente.get('parent')\n        \n        # Crea il messaggio con tutte le informazioni per ciascun dipendente\n        message = f\"\"\"\n            Corso di Formazione: {corso_formazione}\n            Formazione Ecopan: {formazione_ecopan}\n            Data Formazione: {data_formazione}\n            Descrizione: {descrizione}\n            Data Visita: {data_visita}\n            Data Scadenza: {data_scadenza}\n            Annotazioni Visita: {annotazioni_visita}\n            \n            Dettagli Dipendente:\n            - Nome Dipendente: {name}\n            - ID Parent: {parent}\n        \"\"\"\n        \n        if fun == 'formazione':\n            if corso_formazione and data_formazione:\n                try:\n                    docF = frappe.new_doc('Ecopan File Formazione')\n                    docF.corso_formazione = corso_formazione\n                    docF.formazione_ecopan = formazione_ecopan\n                    docF.data_formazione = data_formazione\n                    docF.descrizione = descrizione\n                    docF.id_parent = parent\n                    docF.id_child = name\n                    docF.insert()\n                except Exception as e:\n                    frappe.msgprint(\n                        msg=f\"Errore durante l'inserimento della Formazione: {str(e)}\",\n                        title=\"Errore\",\n                        raise_exception=False\n                    )\n        \n        elif fun == 'visite':\n            if data_visita and data_scadenza:\n                try:\n                    docV = frappe.new_doc('Ecopan Visite Mediche')\n                    docV.data_visita = data_visita\n                    docV.data_scadenza = data_scadenza\n                    docV.data_formazione = data_formazione\n                    docV.annotazioni_visita = annotazioni_visita\n                    docV.id_parent = parent\n                    docV.id_child = name\n                    docV.insert()\n                except Exception as e:\n                    frappe.msgprint(\n                        msg=f\"Errore durante l'inserimento della Visita Medica: {str(e)}\",\n                        title=\"Errore\",\n                        raise_exception=False\n                    )\n        \n        # Visualizza il messaggio tramite frappe.msgprint\n        frappe.msgprint(\n            msg=message,\n            title=f'Dettagli Corso e Dipendente {name}',\n            raise_exception=False\n        )\nelse:\n    frappe.msgprint(\n        msg='Dipendenti non è una lista o non è formattato correttamente',\n        title='Errore',\n        raise_exception=False\n    )\n",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": "insert_empty_dipendenti",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-12-12 10:29:40.353169",
  "module": "EcopanCRM",
  "name": "Insert_dipendenti_Vuoti",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": null,
  "script": "customer = frappe.form_dict.get('customer')\nnum_dipendenti =  int(frappe.form_dict.get('num_dipendenti'))\nfor i in range(num_dipendenti):\n    docF = frappe.new_doc('Ecopan Employee')\n    docF.parent = customer,\n    docF.parentfield = 'dipendenti'\n    docF.parenttype = 'Ecopan Customer'\n    docF.insert()\n",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": "vw_visite_formazione",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-12-13 09:43:17.100829",
  "module": "EcopanCRM",
  "name": "Vista Formazione e Visite",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": null,
  "script": "# Ottieni i dati dai form\ncustomer = frappe.form_dict.get('customer')  # \"Formazione HACCP\"\ndipi = frappe.form_dict.get('employee')\nif not customer:\n    frappe.throw(_(\"Cliente non passato\"))\n\n# Recupera i dipendenti del cliente\nemployees = frappe.get_all(\n    'Ecopan Employee', \n    filters={'parent': customer, 'name':dipi}, \n    fields=['name', 'first_name', 'last_name', 'gender']\n)\n\n# Lista per i dipendenti con righe valide\nfiltered_employees = []\n\n# Verifica e aggiungi solo i dipendenti con dati associati\nfor employee in employees:\n    # File Formazione\n    file_formazione = frappe.get_all(\n        'Ecopan File Formazione',\n        filters={'id_child': employee['name'], 'id_parent': customer},\n        fields=['corso_formazione', 'formazione_ecopan', 'data_formazione', 'descrizione', 'id_parent', 'id_child']\n    )\n\n    # Visite Mediche\n    visite_mediche = frappe.get_all(\n        'Ecopan Visite Mediche',\n        filters={'id_child': employee['name'], 'id_parent': customer},\n        fields=['data_visita', 'data_scadenza', 'annotazioni_visita', 'id_parent', 'id_child']\n    )\n\n    # Aggiungi il dipendente alla lista se ha dati in entrambi\n    if file_formazione and visite_mediche:\n        employee['file_formazione'] = file_formazione\n        employee['visita_medica'] = visite_mediche\n        filtered_employees.append(employee)\n\n# Restituisci i dipendenti filtrati e i relativi dati\nfrappe.response['message'] = filtered_employees",
  "script_type": "API"
 },
 {
  "allow_guest": 1,
  "api_method": "haccp_View",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-12-17 10:03:41.984581",
  "module": "EcopanCRM",
  "name": "HACCP_View",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": null,
  "script": "customer = frappe.form_dict.get('client')\nDVR = frappe.get_all('Ecopan HACCP', filters={'client': customer}, fields=['name','creation_date','expiry_date','branch','client'], ignore_permissions=True)\nfrappe.response['message'] = DVR\n",
  "script_type": "API"
 },
 {
  "allow_guest": 1,
  "api_method": "get_formazione_employee",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-03-03 13:36:20.006740",
  "module": "EcopanCRM",
  "name": "get_formazione_employee",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": null,
  "script": "customer_id = frappe.form_dict.get('customer_id')\nfirst_name = frappe.form_dict.get('first_name')\nlast_name = frappe.form_dict.get('last_name')\ndate_formazione = frappe.form_dict.get('date_formazione')\ncorso_formazione = frappe.form_dict.get('corso_formazione')\n\n# Se first_name o last_name sono vuoti o nulli, li impostiamo su None per non applicare filtri su di essi\nif not first_name:\n    first_name = None\nif not last_name:\n    last_name = None\nif not date_formazione:\n    date_formazione = '2999-12-31'  # Impostiamo una data molto futura se non fornita\nif not corso_formazione:\n    corso_formazione = None\n\nfilters = {\n    'parent': customer_id,\n    'employment_status': \"Active\"\n}\n\n# Aggiungiamo filtri condizionati per first_name, last_name, date_formazione, corso_formazione solo se sono stati forniti\nif first_name:\n    filters['first_name'] = ['like', f\"%{first_name}%\"]\nif last_name:\n    filters['last_name'] = ['like', f\"%{last_name}%\"]\n\nemployees = frappe.get_all(\n    'Ecopan Employee',\n    fields=['name', 'first_name', 'last_name'],\n    #fields=['*'],\n    filters=filters\n)\n\nresults = []\nfor employee in employees:\n    file_formazioni_filters = {\n        'id_child': employee.name\n        ,'data_formazione': ['<=', date_formazione]\n    }\n\n    # Aggiungiamo filtro per corso_formazione se fornito\n    if corso_formazione:\n        file_formazioni_filters['corso_formazione'] = ['like', f\"%{corso_formazione}%\"]\n\n    file_formazioni = frappe.get_all(\n        'Ecopan File Formazione',\n        fields=['corso_formazione', 'data_formazione', 'descrizione','id_child']\n        ,filters=file_formazioni_filters\n    )\n\n    if file_formazioni:\n        for formazione in file_formazioni:\n            results.append({\n                'employee_name': employee.name,\n                'first_name': employee.first_name,\n                'last_name': employee.last_name,\n                'corso_formazione': formazione['corso_formazione'],\n                'data_formazione': formazione['data_formazione'],\n                'descrizione': formazione['descrizione']\n            })\n\nfrappe.response['message'] = results\nfrappe.response['message_e'] = employees\nfrappe.response['message_f'] = file_formazioni\n",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": "get_all_formazione",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-01-14 11:34:50.220067",
  "module": "EcopanCRM",
  "name": "get_all_formazione",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": null,
  "script": "form=frappe.get_all('Ecopan File Formazione', fields=['distinct corso_formazione'])\nfrappe.response['message'] = form",
  "script_type": "API"
 },
 {
  "allow_guest": 1,
  "api_method": "get_medical_employee",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-03-03 13:25:54.853337",
  "module": "EcopanCRM",
  "name": "get_medical_employee",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": null,
  "script": "customer_id = frappe.form_dict.get('customer_id')\nfirst_name = frappe.form_dict.get('first_name')\nlast_name = frappe.form_dict.get('last_name')\ndate_visita = frappe.form_dict.get('date_visita')  # Aggiornato con il campo corretto\n\n# Se first_name o last_name sono vuoti o nulli, li impostiamo su None per non applicare filtri su di essi\nif not first_name:\n    first_name = None\nif not last_name:\n    last_name = None\nif not date_visita:\n    date_visita = '1900-12-31'  # Impostiamo una data molto futura se non fornita\n\nfilters = {\n    'parent': customer_id,\n    'employment_status': \"Active\"\n}\n\n# Aggiungiamo filtri condizionati per first_name e last_name solo se sono stati forniti\nif first_name:\n    filters['first_name'] = ['like', f\"%{first_name}%\"]\nif last_name:\n    filters['last_name'] = ['like', f\"%{last_name}%\"]\n\nemployees = frappe.get_all(\n    'Ecopan Employee',\n    fields=['name', 'first_name', 'last_name'],\n    filters=filters\n)\n\nresults = []\nfor employee in employees:\n    visite_mediche_filters = {\n        'id_child': employee.name,\n        'data_visita': ['>=', date_visita]\n    }\n\n    visite_mediche = frappe.get_all(\n        'Ecopan Visite Mediche',\n        fields=['data_visita', 'data_scadenza', 'medico', 'certificato', 'annotazioni_visita'],\n        filters=visite_mediche_filters\n    )\n\n    if visite_mediche:\n        for visita in visite_mediche:\n            results.append({\n                'employee_name': employee.name,\n                'first_name': employee.first_name,\n                'last_name': employee.last_name,\n                'data_visita': visita['data_visita'],\n                'data_scadenza': visita['data_scadenza'],\n                'medico': visita['medico'],\n                'certificato': visita['certificato'],\n                'annotazioni_visita': visita['annotazioni_visita']\n            })\n\nfrappe.response['message'] = results\n",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": "nomine_haccp",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-01-14 19:01:08.136712",
  "module": "EcopanCRM",
  "name": "nomine_haccp",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": null,
  "script": "client = frappe.form_dict.get('client')\n# Query 1: Ottieni dipendenti associati\ndelega_haccp = frappe.get_all('Ecopan Employee',filters={'parent': client, 'data_delega_haccp': ['is', 'set']},\nfields=['first_name', 'last_name', 'current_job_title', 'employment_status', 'data_delega_haccp'])\nfrappe.response['message_delega_haccp'] = delega_haccp\n\n# Query 2: Ottieni dipendenti associati\nresponsabile_haccp = frappe.get_all('Ecopan Employee',filters={'parent': client, 'data_responsabile_haccp': ['is', 'set']},\nfields=['first_name', 'last_name', 'current_job_title', 'employment_status', 'data_responsabile_haccp'])\nfrappe.response['message_responsabile_haccp'] = responsabile_haccp\n",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": "get_branch_client",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-01-31 14:41:01.805166",
  "module": "EcopanCRM",
  "name": "get_branch_client",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": null,
  "script": "#  ,  # Filtro per il genitore\ncustomer = frappe.form_dict.get('customer')\n# Recupera i branch associati al cliente\nbranches = frappe.get_all(\n    \"Ecopan Branch Link\",\n  filters={\"parent\": customer},\n  fields=[\"*\"]  # Estrai solo il nome (o altri campi se necessari)\"name\",\n)\n\n# Restituisci un elenco dei nomi dei branch\nfrappe.response['message'] = branches",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-03-08 12:26:12.538672",
  "module": "EcopanCRM",
  "name": "duplicate branch",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Ecopan Customer",
  "script": "if doc.get(\"sedi_cliente\"):\n    # Recupera i link esistenti includendo il 'name' del documento\n    existing_links = frappe.get_all(\n        \"Ecopan Branch Link\",\n        filters={\"parentdoc\": doc.name},\n        fields=[\"name\", \"namedoc\", \"branch_name\"]\n    )\n\n    # Mappa namedoc -> name del documento Ecopan Branch Link\n    existing_links_dict = {\n        link[\"namedoc\"].strip(): link[\"name\"] \n        for link in existing_links \n        if link[\"namedoc\"]\n    }\n\n    updated_branches = []\n\n    for child in doc.sedi_cliente:\n        branch_name = child.branch_name\n        parent = doc.name\n        namedoc = child.name.strip()\n\n        # Log informativo (usa frappe.log invece di log_error)\n        frappe.log(f\"Processing child namedoc: {namedoc}, Branch Name: {branch_name}\")\n\n        if namedoc in existing_links_dict:\n            try:\n                # Usa il name corretto del documento\n                link_name = existing_links_dict[namedoc]\n                link_doc = frappe.get_doc(\"Ecopan Branch Link\", link_name)\n                link_doc.branch_name = branch_name\n                link_doc.save()\n                frappe.log(f\"Updated Ecopan Branch Link: {link_doc.name}\")\n            except frappe.DoesNotExistError:\n                frappe.log_error(f\"Error: Ecopan Branch Link {link_name} not found\")\n            except Exception as e:\n                frappe.log_error(f\"Unexpected error: {str(e)}\")\n        else:\n            # Crea un nuovo documento\n            nuovo_doc = frappe.get_doc({\n                \"doctype\": \"Ecopan Branch Link\",\n                \"branch_name\": branch_name,\n                \"namedoc\": namedoc,\n                \"parentdoc\": parent,\n                \"parentfielddoc\": \"sedi_cliente\",\n                \"parenttypedoc\": doc.doctype\n            })\n            nuovo_doc.insert()\n            frappe.log(f\"Inserted new Ecopan Branch Link: {nuovo_doc.name}\")\n\n        updated_branches.append(namedoc)\n\n    # Elimina i documenti non più presenti\n    for namedoc, link_name in existing_links_dict.items():\n        if namedoc not in updated_branches:\n            frappe.delete_doc(\"Ecopan Branch Link\", link_name)\n            frappe.log(f\"Deleted Ecopan Branch Link: {link_name}\")",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": "get_list_custom",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-03-11 11:27:09.763107",
  "module": "EcopanCRM",
  "name": "get_list_custom",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": null,
  "script": "doctype = frappe.form_dict.get('doctype')\n\nlist = frappe.get_all(\n   doctype ,\n  \n  fields=[\"name\"],  # Estrai solo il nome (o altri campi se necessari)\n order_by=\"name asc\" \n)\n\n# Restituisci un elenco dei nomi dei branch\nfrappe.response['message'] = list\n    ",
  "script_type": "API"
 }
]